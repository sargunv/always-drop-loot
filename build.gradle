buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

plugins {
    id "com.palantir.git-version" version "0.11.0"
    id 'com.github.sherter.google-java-format' version '0.8'
    id 'de.fuerstenau.buildconfig' version '1.1.8'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'idea'

version = "$mcVersion-${gitVersion()}"
group = "me.sargunvohra.${modId}"
archivesBaseName = modId

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

minecraft {
    mappings channel: 'snapshot', version: "${mappingsVersion}-${mcVersion}".toString()
    accessTransformer = file("src/main/resources/META-INF/accesstransformer.cfg")

    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mcVersion}-${forgeVersion}"
}

processResources {
    inputs.property "modVersion", project.version
    inputs.property "mcVersion", project.properties.mcVersion
    inputs.property "forgeVersion", project.properties.forgeVersion
    inputs.property "modId", project.properties.modId

    eachFile { file ->
        if (file.name.endsWith('.toml') || file.name.endsWith('.mcmeta')) {
            file.expand(
                    modId: modId,
                    modVersion: project.version,
                    mcVersion: mcVersion,
                    forgeMajorVersion: forgeVersion.takeWhile { it != '.' },
            )
        }
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : modId,
                "Specification-Vendor"    : project.group,
                "Specification-Version"   : "1.0",
                "Implementation-Title"    : modId,
                "Implementation-Version"  : project.version,
                "Implementation-Vendor"   : project.group,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
        ],)
    }
}

googleJavaFormat {
    exclude '.gradle'
}
